<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.gdu</groupId>
	<artifactId>app01</artifactId>
	<name>01_Ioc_Container</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	
	
	
	
	
	<!-- Maven프로젝트 
	 	mvnrepository.com(중앙저장소, cental)에 필요한 jar를 보관해 두고 
	 	pom.xal ㅠ파일에 디펜던서를 추가하면 해당 jar를 다운로드 하는 프로젝트-->
	 	
	<!--pom.xal을 자주 저장하면 자주 다운로드를 진행하기 때문에 오류 확률이 높아진다.\\
		pom.xml파일을 저장한 뒤에는 다운로드가 완료될때까지 기다려야한다.\
		pom.xml파일의 변경사항이 반영되지 않으면[Maven]-[Update Project] 실행해야한다,
		jar는 저장만 하면 다운로드가 됨
	  --> 	
	  
	<!-- 
		다운로드 된 jar파일은 C:\Users\계정명\.m2 디렉터리에 저장된다.
		
		jar에 문제가 발생한 경우 
		1) STS를 끄고,
		2) 이 디렉터리에 저장된 모든 jar를 다 지우고 
		3) STS를 다시 켠다(한참 기다려야 한다,) - 왜? jar를 처음부터 끝까지 다시 받아오니까 
		
		문제가 발생한 jar만 지우고 다시 받으면 되지 않나? 안됨
		dependency 의존성 때문에 안된다. jar파일을 실행하기 위해 다른 jar가 필요한 경우가 있기 때문이다.(종속성이라고함). 
		이런 종속적인 관계는 repository가 알고 잇음 
		
		코드가 똑같아도 . . jar 때문에 실행안될 수도 있음
	 -->
	 
	 <!-- properties태그에 작성해 둔 버전은 모두 ${}로 사용 가능하다. 
	 	${java-version} 작성           -> 11로 치환됨 ~ *
	 	${org.springframework-version} -> 5.3.3으로 치환
	 	${org.aspectj-version}         -> 1.9.6으로 치환.
	 	${org.slf4j-version}           -> 1.7.30으로 치환.
	  -->
	 	
	 	
	 	
	<properties>
		<java-version>11</java-version>
		<org.springframework-version>5.3.3</org.springframework-version>
		<org.aspectj-version>1.9.6</org.aspectj-version>
		<org.slf4j-version>1.7.30</org.slf4j-version>
	</properties>
	
	<!-- 
		디펜던시 
		
		의존 관계를 파악해서 필요한 jar를 모두 받아 주기 때문에 dependency라고 한다.
		한마디로 디펜던시는 jar이다. 
		
	 -->
	
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<!-- servlet의 artifactId와 varsion 수정 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			 <artifactId>javax.servlet-api</artifactId>
   			 <version>4.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<!-- JUnit5는 JUnit Jupiter라고 하고, 디펜던지를 통째로 바꿔야한다. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>        
	</dependencies>
	
	
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
