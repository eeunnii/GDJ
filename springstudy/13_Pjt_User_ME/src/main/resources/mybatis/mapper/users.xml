<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app13.mapper.UserMapper">


	<!-- select의 id를 만들때 어떤 목적을 가진 이름은 좋지 않을 수도 있음 
			예를들면 isReduceCheck 이런거. 이 쿼리문은 다양한 곳에 쓰이기 때문에 
			갑자기 중복체크해버리는 이름이 나오면 이상해지니까 ... -->
	
	<!-- 아이디 중복체크, 이메일 중복체크, 로그인...깃허브 -->
	<select id="selectUserByMap" parameterType="Map" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 <where>
			 <if test="id != null">
			 	ID = #{id}
			 </if>
			 <if test="pw != null">
			 	AND PW = #{pw}
			 </if>
			 <if test="email != null">
			 	AND EMAIL = #{email}
			 </if>
			 <if test="sessionId!=null">
			 	AND SESSION_ID = #{sessionId}
			 	AND	SESSION_LIMIT_DATE > SYSDATE 
			 </if>
		 </where>
	</select>
	<!-- where이라는 태그가 하는 일 : 바로 and 나와도 실행시켜줌
		걍 텍스트where다음에 if오면 바로 and나오면 이상해짐 
		where 1=1 넣고 if문 넣는 .. 방법도 있다!-->
		
		<!-- <는 c데이터 써야되는데 >는 안써도됨? -->
	
	
	
	<select id="selectUserByEmail" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
			FROM RETIRE_USERS
			WHERE ID=#{id}
	</select>
	
		<!-- 로그인 -->
	<select id="selectUserByIdPw" parameterType="UserDTO" resultType="UserDTO">
		SELECT (USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
			FROM USERS
			WHERE ID=#{id}
			AND PW=#{pw}
	</select>
	
	
		
	
	<select id="selectRetireUserById" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
			FROM RETIRE_USERS
			WHERE ID=#{id}
	</select>	
	
	
	<!-- 일반회원 -->
	<insert id="insertUser" parameterType="UserDTO">
		INSERT INTO USERS
			(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
		VALUES
			(UESRS_SEQ.NEXTVAL, #{id}, #{pw}, #{name}, #{gender}, #{email}, #{mobile}, #{birthyear}, #{birthdate}, #{postcode}, #{roadAddress}, #{jibunAddress}, #{detailAddress}, #{extraAddress}, #{agreeCode}, null, SYSDATE, SYSDATE, SYSDATE, null, null)
	
	</insert>
	
	<!-- 로그인 기록(ACCESS_LOG) 남기기 -->
	<update id="updateAccessLog" parameterType="String">
		UPDATE ACCESS_LOG 
		SET LAST_LOGIN_DATE = SYSDATE
		WHERE ID= #{id}
	</update>
	
	<insert id="insertAccessLog" parameterType="String">
		INSERT INTO ACCESS_LOG
			(ACCESS_LOG_NO, ID, LAST_LOGIN_DATE)
		VALUES
			(ACCESS_LOG_SEQ.NEXTVAL, #{id}, STSDATE)
		
	</insert>
	
	<!-- 회원탈퇴1 : USERS 테이블에 추가 -->
	<delete id="deleteUser" parameterType="int">
		DELETE 
		FROM USERS
		WHERE USER_NO = #{userNo}
	</delete>
	
	
	<!-- 회원탈퇴2 : RETIRE_USERS 테이블에 추가 -->
	<insert id="insertRetireUser" parameterType="RetireUserDTO" >
		INSERT INTO RETIRE_USERS
			(USER_NO, ID, JOIN_DATE, RETIRE_DATE)
		VALUES
			(#{userNo},#{id},#{joinDate}, SYSDATE)
	</insert>
	
	<!-- 로그인 유지를 위한 SESSION_ID/SESSION_LIMIT_DATE 업데이트  -->
	<update id="updateSessionInfo" parameterType="UserDTO">
		UPDATE USERS
			SET SESSION_ID = #{sessionId}
				,SESSION_LIMIT_DATE = #{sessionLimitDate}
			WHERE ID=#{id}	
	</update>
	
	<!-- 마이페이지 : 비밀번호 수정 -->
	<update id="updateUserPassword "parameterMap="UersDTO">
	
	
	
	</update>

	
</mapper>