<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app13.mapper.UserMapper">


	<!-- select의 id를 만들때 어떤 목적을 가진 이름은 좋지 않을 수도 있음 
			예를들면 isReduceCheck 이런거. 이 쿼리문은 다양한 곳에 쓰이기 때문에 
			갑자기 중복체크해버리는 이름이 나오면 이상해지니까 ... -->
	
	<!-- 아이디 중복체크1, 이메일 중복체크, 로그인, 로그인 유지를 이용한 로그인, 마이페이지 가기 전 비번 확인 -->
	<select id="selectUserByMap" parameterType="Map" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 <where>
			 <if test="id != null">
			 	ID = #{id}
			 </if>
			 <if test="pw != null">
			 	AND PW = #{pw}
			 </if>
			 <if test="email != null">
			 	AND EMAIL = #{email}
			 </if>
			 <if test="sessionId!=null">
			 	AND SESSION_ID = #{sessionId}
			 	AND	SESSION_LIMIT_DATE > SYSDATE 
			 </if>
		 </where>
	</select>
	<!-- where이라는 태그가 하는 일 : 바로 and 나와도 실행시켜줌
		걍 텍스트where다음에 if오면 바로 and나오면 이상해짐 
		where 1=1 넣고 if문 넣는 .. 방법도 있다!-->
		
		<!-- <는 c데이터 써야되는데 >는 안써도됨? -->
	
	
	
	<select id="selectUserByEmail" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
			FROM RETIRE_USERS
			WHERE ID=#{id}
	</select>
	
		<!-- 로그인 -->
	<select id="selectUserByIdPw" parameterType="UserDTO" resultType="UserDTO">
		SELECT (USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
			FROM USERS
			WHERE ID=#{id}
			AND PW=#{pw}
	</select>
	
	
		
	
	<select id="selectRetireUserById" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
			FROM RETIRE_USERS
			WHERE ID=#{id}
	</select>	
	
	
	<!-- 일반회원 -->
	<insert id="insertUser" parameterType="UserDTO">
		INSERT INTO USERS
			(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
		VALUES
			(UESRS_SEQ.NEXTVAL, #{id}, #{pw}, #{name}, #{gender}, #{email}, #{mobile}, #{birthyear}, #{birthdate}, #{postcode}, #{roadAddress}, #{jibunAddress}, #{detailAddress}, #{extraAddress}, #{agreeCode}, null, SYSDATE, SYSDATE, SYSDATE, null, null)
	
	</insert>
	
	<!-- 로그인 기록(ACCESS_LOG) 남기기 -->
	<update id="updateAccessLog" parameterType="String">
		UPDATE ACCESS_LOG 
		SET LAST_LOGIN_DATE = SYSDATE
		WHERE ID= #{id}
	</update>
	
	<insert id="insertAccessLog" parameterType="String">
		INSERT INTO ACCESS_LOG
			(ACCESS_LOG_NO, ID, LAST_LOGIN_DATE)
		VALUES
			(ACCESS_LOG_SEQ.NEXTVAL, #{id}, STSDATE)
		
	</insert>
	
	<!-- 회원탈퇴1 : USERS 테이블에 추가 -->
	<delete id="deleteUser" parameterType="int">
		DELETE 
		FROM USERS
		WHERE USER_NO = #{userNo}
	</delete>
	
	
	<!-- 회원탈퇴2 : RETIRE_USERS 테이블에 추가 -->
	<insert id="insertRetireUser" parameterType="RetireUserDTO" >
		INSERT INTO RETIRE_USERS
			(USER_NO, ID, JOIN_DATE, RETIRE_DATE)
		VALUES
			(#{userNo},#{id},#{joinDate}, SYSDATE)
	</insert>
	
	<!-- 로그인 유지를 위한 SESSION_ID/SESSION_LIMIT_DATE 업데이트  -->
	<update id="updateSessionInfo" parameterType="UserDTO">
		UPDATE USERS
			SET SESSION_ID = #{sessionId}
				,SESSION_LIMIT_DATE = #{sessionLimitDate}
			WHERE ID=#{id}	
	</update>
	
	
	<!-- 마이페이지 : 비밀번호 수정 -->
	<update id="updateUserPassword" parameterMap="UersDTO">
		UPDATE USERS
		   SET PW = #{pw}
		     , PW_MODIFY_DATE = SYSDATE
		 WHERE USER_NO = #{userNo}
	</update>
	
	
	<!-- 
		select 회원.칼럼 , 접속기록.칼럽
		form 회원 left outer join 접속기록
		on 회원.아이디 = 접속기록.아이디 
		where months_between(sysdate, 접속기록,last_login_date) >= 12 :접속기록이 있는 회원
		or months_between(sysdate, 회원.join_date) >= 12 and 접속기록_last_login_date is null) : 접속기록이 없는 회원
	 -->
	<!-- 
		휴면계정처리하기  
		
		지금 프로젝트에서는 접속한 기록이 없는 회원이 하나도 없음 : 왜냐면 가입하자마자 로그인되게 만들었기 때문
		회원 - 접속기록 
		접속한 기록이 없는 회원도 조회할 수 있는 방법 : 아우터조인사용(외부조인)
	-->
	<!-- 휴면처리1 : 1년이상 로그인 기록이 없으면 휴면테이블에 저장 -->
	<insert id="insertSleepUser">
   INSERT INTO SLEEP_USERS (USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, LAST_LOGIN_DATE, SLEEP_DATE)
	   (SELECT U.USER_NO, U.ID, U.PW, U.NAME, U.GENDER, U.EMAIL, U.MOBILE, U.BIRTHYEAR, U.BIRTHDAY, U.POSTCODE, U.ROAD_ADDRESS, U.JIBUN_ADDRESS, U.DETAIL_ADDRESS, U.EXTRA_ADDRESS, U.AGREE_CODE, U.SNS_TYPE, U.JOIN_DATE, A.LAST_LOGIN_DATE, SYSDATE
		  FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
		    ON U.ID = A.ID
		 WHERE MONTHS_BETWEEN(SYSDATE, A.LAST_LOGIN_DATE) >= 12 
		    OR (MONTHS_BETWEEN(SYSDATE, U.JOIN_DATE) >= 12 AND A.LAST_LOGIN_DATE IS NULL)) 
	</insert>
	
	
	
	<!-- 휴먼처리2 : 1년 이상 로그인 기록이 없으면 회원테이블에서 삭제 -->
	<delete id="deleteSleepForUser">
		DELETE
		  FROM USERS
		 WHERE ID IN (SELECT U.ID
		                FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
		                  ON U.ID = A.ID
		               WHERE MONTHS_BETWEEN(SYSDATE, A.LAST_LOGIN_DATE) >= 12
		                  OR (MONTHS_BETWEEN(SYSDATE, U.JOIN_DATE) >= 12 AND A.LAST_LOGIN_DATE IS NULL))
	</delete>
	
	
	<!-- 로그인 이전에 휴면회원인지 확인 -->
	<select id="selectSleepUserById" parameterType="String" resultType="SleepUserDTO">
		SELECT ID, PW, JOIN_DATE, LAST_LOGIN_DATE, SLEEP_DATE
			FROM SLEEP_USERS
			WHERE ID=#{id}
	</select>


	<!-- 아이디가 파라미터로 제공됨, sleep_user => users
		sleep_users => users
		sleep_users delete
		 -->
		 
	<!-- 휴면복원1 : 복원할 회원을 USERS테이블에 삽입 -->	 
		 <insert id="insertRestoreUser" parameterType="String">
			INSERT INTO USERS(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE)
				(SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE
				   FROM SLEEP_USERS
				  WHERE ID = #{id})
		 </insert>
	<!-- 휴면복원1 : 복원할 회원을 sleep_users테이블에 삽입 -->		 
		 <delete id="ddeleteSleepUser" parameterType="String">
			DELETE
			  FROM SLEEP_USERS
			 WHERE ID = #{id}
		 </delete>
	
</mapper>